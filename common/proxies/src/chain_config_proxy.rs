// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct ChainConfigContractProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for ChainConfigContractProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = ChainConfigContractProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        ChainConfigContractProxyMethods { wrapped_tx: tx }
    }
}

pub struct ChainConfigContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> ChainConfigContractProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<OptionalValue<structs::configs::SovereignConfig<Env::Api>>>,
    >(
        self,
        opt_config: Arg0,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&opt_config)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> ChainConfigContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> ChainConfigContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn update_sovereign_config_during_setup_phase<
        Arg0: ProxyArg<structs::configs::SovereignConfig<Env::Api>>,
    >(
        self,
        new_config: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("updateSovereignConfigSetupPhase")
            .argument(&new_config)
            .original_result()
    }

    pub fn update_sovereign_config<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg1: ProxyArg<structs::configs::SovereignConfig<Env::Api>>,
    >(
        self,
        hash_of_hashes: Arg0,
        new_config: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("updateSovereignConfig")
            .argument(&hash_of_hashes)
            .argument(&new_config)
            .original_result()
    }

    pub fn complete_setup_phase(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("completeSetupPhase")
            .original_result()
    }

    pub fn register<
        Arg0: ProxyArg<structs::ValidatorInfo<Env::Api>>,
    >(
        self,
        new_validator: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("register")
            .argument(&new_validator)
            .original_result()
    }

    pub fn unregister<
        Arg0: ProxyArg<structs::ValidatorInfo<Env::Api>>,
    >(
        self,
        validator_info: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unregister")
            .argument(&validator_info)
            .original_result()
    }

    pub fn sovereign_config(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, structs::configs::SovereignConfig<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("sovereignConfig")
            .original_result()
    }

    pub fn id_to_bls_key_mapper<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("idToBlsKey")
            .argument(&id)
            .original_result()
    }

    pub fn bls_key_to_id_mapper<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("blsKeyToId")
            .argument(&id)
            .original_result()
    }

    pub fn was_previously_slashed<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        validator: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("wasPreviouslySlashed")
            .argument(&validator)
            .original_result()
    }
}
